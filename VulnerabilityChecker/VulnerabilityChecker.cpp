
// VulnerabilityChecker.cpp : アプリケーションのクラス動作を定義します。
//

#include "pch.h"
#include "framework.h"
#include "VulnerabilityChecker.h"
#include "VulnerabilityCheckerDlg.h"
#include <memory>

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CVulnerabilityCheckerApp

BEGIN_MESSAGE_MAP(CVulnerabilityCheckerApp, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CVulnerabilityCheckerApp の構築

CVulnerabilityCheckerApp::CVulnerabilityCheckerApp()
{
	// 再起動マネージャーをサポートします
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;

	// TODO: この位置に構築用コードを追加してください。
	// ここに InitInstance 中の重要な初期化処理をすべて記述してください。
}


// 唯一の CVulnerabilityCheckerApp オブジェクト

CVulnerabilityCheckerApp theApp;


// CVulnerabilityCheckerApp の初期化

BOOL CVulnerabilityCheckerApp::InitInstance()
{
	INITCOMMONCONTROLSEX InitCtrls = { 0 };
	InitCtrls.dwSize = sizeof(InitCtrls);
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();


	AfxEnableControlContainer();

	auto shellManager = std::make_unique<CShellManager>();

	// MFC コントロールでテーマを有効にするために、"Windows ネイティブ" のビジュアル マネージャーをアクティブ化
	CMFCVisualManager::SetDefaultManager(RUNTIME_CLASS(CMFCVisualManagerWindows));

	SetRegistryKey(_T("アプリケーション ウィザードで生成されたローカル アプリケーション"));

	CVulnerabilityCheckerDlg dlg;
	m_pMainWnd = &dlg;
	(void)dlg.DoModal();

#if !defined(_AFXDLL) && !defined(_AFX_NO_MFC_CONTROLS_IN_DIALOGS)
	ControlBarCleanUp();
#endif

	// ダイアログは閉じられました。アプリケーションのメッセージ ポンプを開始しないで
	//  アプリケーションを終了するために FALSE を返してください。
	return FALSE;
}

std::wstring CVulnerabilityCheckerApp::FormatErrorMessage(ULONG errorCode) const
{
	constexpr DWORD BUFFERLENGTH = 1024;
	std::vector<wchar_t> buf(BUFFERLENGTH);
	FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, nullptr, static_cast<DWORD>(errorCode), 0, buf.data(), BUFFERLENGTH - 1, 0);
	return std::wstring(buf.data()) + L"\n";
}

std::wstring CVulnerabilityCheckerApp::Utf8ToUtf16(const std::string& src) const
{
	auto bufLen = MultiByteToWideChar(CP_UTF8, 0, src.c_str(), -1, nullptr, 0);
	std::vector<wchar_t> buffer(bufLen);
	(void)MultiByteToWideChar(CP_UTF8, 0, src.c_str(), -1, buffer.data(), bufLen);
	return std::wstring(buffer.data());
}