#include "pch.h"
#include "Compressor.h"
#include <compressapi.h>
#include <memory>

//éQçlÅFhttps://docs.microsoft.com/en-us/windows/win32/cmpapi/-compression-portal

unsigned long Compressor::Decompress(const std::vector<char>& src, std::string& dst) const
{

	DECOMPRESSOR_HANDLE tmpHandle = nullptr;
	if (!CreateDecompressor(compressAlgorithmMap.at(m_algorithm), nullptr, &tmpHandle))
	{
		OutputDebugString(L"CreateDecompressor failed\n");
		return GetLastError();
	}

	std::unique_ptr<std::remove_pointer<DECOMPRESSOR_HANDLE>::type, decltype(&CloseDecompressor)> decompressorHandle{ tmpHandle, CloseDecompressor };
	SIZE_T decompressBufferSize = 0;
	if (!::Decompress(decompressorHandle.get(), reinterpret_cast<LPCVOID>(src.data()), src.size(), nullptr, 0, &decompressBufferSize))
	{
		if (auto errorCode = GetLastError(); errorCode != ERROR_INSUFFICIENT_BUFFER)
		{
			OutputDebugString(L"Decompress failed\n");
			return errorCode;
		}
	}

	std::vector<BYTE> decompressData(decompressBufferSize);
	SIZE_T decompressDataSize = 0;
	if (!::Decompress(decompressorHandle.get(), reinterpret_cast<LPCVOID>(src.data()), src.size(), decompressData.data(), decompressBufferSize, &decompressDataSize))
	{
		OutputDebugString(L"Decompress failed\n");
		return GetLastError();
	}

	dst.assign(reinterpret_cast<char*>(decompressData.data()), decompressDataSize);
	return ERROR_SUCCESS;
}

const std::map<COMPRESS_ALGORITHM, DWORD> Compressor::compressAlgorithmMap =
{
	{COMPRESS_ALGORITHM::MSZIP, COMPRESS_ALGORITHM_MSZIP},
	{COMPRESS_ALGORITHM::XPRESS, COMPRESS_ALGORITHM_XPRESS},
	{COMPRESS_ALGORITHM::XPRESS_HUFF, COMPRESS_ALGORITHM_XPRESS_HUFF},
	{COMPRESS_ALGORITHM::LZMS, COMPRESS_ALGORITHM_LZMS},
};