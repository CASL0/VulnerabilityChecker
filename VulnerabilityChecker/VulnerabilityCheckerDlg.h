
// VulnerabilityCheckerDlg.h : ヘッダー ファイル
//

#pragma once
#include "httpRequest.h"
#include "Compressor.h"
#include <vector>
#include <string>
#include <queue>

// CVulnerabilityCheckerDlg ダイアログ
class CVulnerabilityCheckerDlg : public CDialogEx
{
// コンストラクション
public:
	CVulnerabilityCheckerDlg(CWnd* pParent = nullptr);	// 標準コンストラクター

// ダイアログ データ
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_VULNERABILITYCHECKER_DIALOG };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV サポート


// 実装
protected:
	HICON m_hIcon;

	// 生成された、メッセージ割り当て関数
	virtual BOOL OnInitDialog();
	afx_msg void OnPaint();
	afx_msg HCURSOR OnQueryDragIcon();
	DECLARE_MESSAGE_MAP()

private:
	enum class DOWNLOAD_TARGET
	{
		MYJVN_ALERT_LIST = 0,
		MYJVN_VERSION_CHECKER,
	};

	static const UINT MESSAGE_DOWNLOAD_COMPLETE = WM_APP + 1;

	HttpRequest m_httpRequest{ L"Vulnerability Checker" };
	Compressor m_compressor;
	std::vector<char> m_httpBuffer;
	std::vector<char> m_httpResponseBody;
	int m_subItem = 0;
	bool m_sortAscending = true;
	std::queue<std::vector<char>> m_httpResponseQue;
	std::queue<DOWNLOAD_TARGET> m_targetQue;

	static void CALLBACK cb(HINTERNET hInternet, DWORD_PTR dwContext, DWORD dwInternetStatus, LPVOID lpvStatusInformation, DWORD dwStatusInformationLength);
	void OnResponse(HINTERNET hInternet, DWORD dwInternetStatus, LPVOID lpvStatusInformation, DWORD dwStatusInformationLength);
	void DisplayAlertList(const std::string& alertList);
	static int CALLBACK MyCompareProc(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);
	BOOL PreTranslateMessage(MSG* msg);
	LRESULT OnDownloadComplete(WPARAM wParam, LPARAM);
	void DownloadVersionChekcer(const std::wstring& url);
	void ExpandVersionChecker(const std::vector<char>& expandContents) const;

	CListCtrl m_alertList;
public:
	afx_msg void OnLvnColumnclickListAlert(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnBnClickedButtonDLVersionChecker();
};
