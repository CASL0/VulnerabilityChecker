// VolnOverView.cpp : 実装ファイル
//

#include "pch.h"
#include "VulnerabilityChecker.h"
#include "VolnOverView.h"
#include "afxdialogex.h"
#include <boost/foreach.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/xml_parser.hpp>
#include <sstream>
#include <iterator>


// VolnOverView ダイアログ

IMPLEMENT_DYNAMIC(VolnOverView, CDialogEx)

VolnOverView::VolnOverView(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_VULN_OVERVIEW, pParent)
{

}

VolnOverView::~VolnOverView()
{
}

void VolnOverView::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_LIST_VOLN_OVERVIEW, m_listVolnOverView);
}


BEGIN_MESSAGE_MAP(VolnOverView, CDialogEx)
	ON_NOTIFY(NM_CLICK, IDC_LIST_VOLN_OVERVIEW, &VolnOverView::OnNMClickListVolnOverview)
	ON_NOTIFY(LVN_COLUMNCLICK, IDC_LIST_VOLN_OVERVIEW, &VolnOverView::OnLvnColumnclickListVolnOverview)
END_MESSAGE_MAP()


// VolnOverView メッセージ ハンドラー
BOOL VolnOverView::OnInitDialog()
{
	(void)CDialogEx::OnInitDialog();

	EnableDynamicLayout(TRUE);
	(void)m_pDynamicLayout->Create(this);
	(void)m_pDynamicLayout->AddItem(IDC_LIST_VOLN_OVERVIEW, CMFCDynamicLayout::MoveNone(), CMFCDynamicLayout::SizeHorizontalAndVertical(100, 100));

	CString resourceStr;
	(void)resourceStr.LoadStringW(IDS_VOLN_OVERVIEW_LIST_TITLE);
	SetWindowText(resourceStr);

	(void)m_listVolnOverView.SetExtendedStyle(m_listVolnOverView.GetExtendedStyle() | LVS_EX_FULLROWSELECT | LVS_EX_GRIDLINES | LVS_EX_HEADERDRAGDROP);
	(void)resourceStr.LoadStringW(IDS_VOLN_LIST_TITLE);
	(void)m_listVolnOverView.InsertColumn(0, resourceStr, LVCFMT_LEFT, 500);

	(void)resourceStr.LoadStringW(IDS_VOLN_LIST_ID);
	(void)m_listVolnOverView.InsertColumn(1, resourceStr, LVCFMT_LEFT, 200);

	(void)resourceStr.LoadStringW(IDS_VOLN_LIST_LINK);
	(void)m_listVolnOverView.InsertColumn(2, resourceStr, LVCFMT_LEFT, 300);

	CRect rect;
	GetWindowRect(&rect);
	(void)SetWindowPos(nullptr, rect.left, rect.top, 1000, rect.bottom - rect.top, SWP_SHOWWINDOW);

	(void)resourceStr.LoadStringW(IDS_URL_VOLN_OVERVIEW);
	if (auto ret = m_httpRequest.RequestUri(resourceStr.GetString(), cb, reinterpret_cast<DWORD_PTR>(this)); ret != ERROR_SUCCESS)
	{
		OutputDebugString(theApp.FormatErrorMessage(ret).c_str());
		(void)AfxMessageBox(theApp.FormatErrorMessage(ret).c_str());
		return FALSE;
	}

	return TRUE;  // フォーカスをコントロールに設定した場合を除き、TRUE を返します。
}

void CALLBACK VolnOverView::cb(HINTERNET hInternet, DWORD_PTR dwContext, DWORD dwInternetStatus, LPVOID lpvStatusInformation, DWORD dwStatusInformationLength)
{
	if (dwContext == NULL)
	{
		return;
	}

	auto dlg = reinterpret_cast<VolnOverView*>(dwContext);
	dlg->OnResponse(hInternet, dwInternetStatus, lpvStatusInformation, dwStatusInformationLength);
}

void VolnOverView::OnResponse(HINTERNET hInternet, DWORD dwInternetStatus, LPVOID lpvStatusInformation, DWORD dwStatusInformationLength)
{
	auto requestHandle = hInternet;
	switch (dwInternetStatus)
	{
	case WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE:
	{
		auto size = *(reinterpret_cast<LPDWORD>(lpvStatusInformation));
		if (size == 0)
		{	//これ以上読み込むデータがないのでコールバック終了
			DisplayOverView(std::string(m_httpResponseBody.data(), m_httpResponseBody.size()));
			std::vector<char> tmp;
			m_httpResponseBody.swap(tmp);
			return;
		}

		m_httpBuffer.resize(size);
		if (!WinHttpReadData(requestHandle, m_httpBuffer.data(), size, nullptr))
		{
			OutputDebugString(L"WinHttpReadData failed\n");
			return;
		}
		// → WINHTTP_CALLBACK_STATUS_READ_COMPLETE
	}
	break;
	case WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE:
	{
		DWORD statusCode = 0;
		DWORD statusCodeSize = sizeof(DWORD);
		if (!WinHttpQueryHeaders(requestHandle, WINHTTP_QUERY_STATUS_CODE | WINHTTP_QUERY_FLAG_NUMBER, WINHTTP_HEADER_NAME_BY_INDEX, &statusCode, &statusCodeSize, WINHTTP_NO_HEADER_INDEX))
		{
			OutputDebugString(L"WinHttpQueryHeaders failed\n");
			return;
		}

		OutputDebugString(L"Status Code: ");
		OutputDebugString(std::to_wstring(statusCode).c_str());
		OutputDebugString(L"\n");
		switch (statusCode)
		{
		case 200:
			break;
		default:
			break;
		}

		if (!WinHttpQueryDataAvailable(requestHandle, nullptr))
		{
			OutputDebugString(L"WinHttpQueryDataAvailable failed\n");
			return;
		}
		// → WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE
		break;
	}
	case WINHTTP_CALLBACK_STATUS_READ_COMPLETE:
		if (lpvStatusInformation && dwStatusInformationLength)
		{
			OutputDebugString(L"Read ");
			OutputDebugString(std::to_wstring(dwStatusInformationLength).c_str());
			OutputDebugString(L"bytes\n");

			m_httpResponseBody.reserve(m_httpResponseBody.size() + dwStatusInformationLength);
			std::copy(m_httpBuffer.begin(), m_httpBuffer.end(), std::back_inserter(m_httpResponseBody));
			std::vector<char> tmp;
			m_httpBuffer.swap(tmp);
			// レスポンスデータデータ問い合わせ
			if (!WinHttpQueryDataAvailable(requestHandle, nullptr))
			{
				OutputDebugString(L"WinHttpQueryDataAvailable failed\n");
				return;
			}
			// → WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE
		}
		break;
	case WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE:
	{
		// WinHttpSendRequestの完了通知

		if (!WinHttpReceiveResponse(requestHandle, nullptr))
		{
			OutputDebugString(L"WinHttpReceiveResponse failed\n");
			return;
		}
		// → WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE
		break;
	}
	case WINHTTP_CALLBACK_STATUS_NAME_RESOLVED:
		OutputDebugString(L"名前解決\n");
		OutputDebugString(reinterpret_cast<LPWSTR>(lpvStatusInformation));
		OutputDebugString(L"\n");
		break;
	case WINHTTP_CALLBACK_STATUS_REQUEST_ERROR:
	{
		auto error = reinterpret_cast<WINHTTP_ASYNC_RESULT*>(lpvStatusInformation);
		CString errorMessage;
		errorMessage.Format(L"ID: %lu, error: %lu\n", error->dwResult, error->dwError);
		OutputDebugString(errorMessage.GetString());
		break;
	}
	default:
		break;
	}

}

void VolnOverView::DisplayOverView(const std::string& overViewInfo)
{
	DWORD itemRow = 0;
	std::stringstream ss(overViewInfo);
	boost::property_tree::ptree pt;
	boost::property_tree::read_xml(ss, pt);
	BOOST_FOREACH(const boost::property_tree::ptree::value_type& child_tree, pt.get_child("rdf:RDF"))
	{
		if (child_tree.first == "item")
		{
			OutputDebugString(L"analyze rdf:RDF/item\n");
			auto& title = child_tree.second.get_child("title");
			auto& id = child_tree.second.get_child("sec:identifier");
			auto& link = child_tree.second.get_child("link");
			(void)m_listVolnOverView.InsertItem(itemRow, theApp.Utf8ToUtf16(title.data()).c_str());
			(void)m_listVolnOverView.SetItemText(itemRow, 1, theApp.Utf8ToUtf16(id.data()).c_str());
			(void)m_listVolnOverView.SetItemText(itemRow, 2, theApp.Utf8ToUtf16(link.data()).c_str());
			itemRow++;
		}
	}
}

BOOL VolnOverView::PreTranslateMessage(MSG* msg)
{
	switch (msg->message)
	{
	case WM_KEYDOWN:
		switch (msg->wParam)
		{
		case VK_ESCAPE:
			return FALSE;
		default:
			break;
		}
		break;
	default:
		break;
	}

	return CDialog::PreTranslateMessage(msg);
}


void VolnOverView::OnNMClickListVolnOverview(NMHDR* pNMHDR, LRESULT* pResult)
{
	auto pNMItemActivate = reinterpret_cast<LPNMITEMACTIVATE>(pNMHDR);
	LVHITTESTINFO lvhti = { 0 };

	lvhti.pt = pNMItemActivate->ptAction;
	(void)m_listVolnOverView.SubItemHitTest(&lvhti);

	//リンク列の場合
	if (lvhti.iSubItem == 2)
	{
		//LVHT_ONITEMLABEL The position is over a list - view item's text.
		if (lvhti.flags & LVHT_ONITEMLABEL)
		{
			auto url = m_listVolnOverView.GetItemText(lvhti.iItem, lvhti.iSubItem);
			OutputDebugString(L"launch browser: ");
			OutputDebugString(url.GetString());
			OutputDebugString(L"\n");
			ShellExecute(nullptr, L"open", url.GetString(), nullptr, nullptr, SW_SHOW);
		}
	}
	*pResult = 0;
}


void VolnOverView::OnLvnColumnclickListVolnOverview(NMHDR* pNMHDR, LRESULT* pResult)
{
	auto pNMLV = reinterpret_cast<LPNMLISTVIEW>(pNMHDR);
	m_subItem = pNMLV->iSubItem;
	m_listVolnOverView.SortItems(MyCompareProc, (LPARAM)this);

	for (auto i = 0; i < m_listVolnOverView.GetItemCount(); i++)
	{
		m_listVolnOverView.SetItemData(i, static_cast<DWORD>(i));
	}
	m_sortAscending = !m_sortAscending;
	*pResult = 0;
}

int CALLBACK VolnOverView::MyCompareProc(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort)
{
	auto dlg = reinterpret_cast<VolnOverView*>(lParamSort);
	CString strItem1 = dlg->m_listVolnOverView.GetItemText(lParam1, dlg->m_subItem);
	CString strItem2 = dlg->m_listVolnOverView.GetItemText(lParam2, dlg->m_subItem);

	return dlg->m_sortAscending ? strItem1.Compare(strItem2) : strItem2.Compare(strItem1);
}
